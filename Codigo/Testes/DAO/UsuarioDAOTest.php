<?php

error_reporting(0);
ini_set("display_errors", 0);

require_once "../../DAO/UsuarioDAO.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-22 at 22:40:11.
 */
class UsuarioDAOTest extends PHPUnit_Framework_TestCase {

    /**
     * @var UsuarioDAO
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new UsuarioDAO();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    	unset($this->object);
        
    }
    
    /**
     * @covers UsuarioDAO::inserirUsuario
     * @todo   Implement testInserirUsuario().
     */
    public function testInserirUsuario() {
       $usuario = new Usuario(1, "lucascouto", 12345, "Lucas Couto", "loc.unb@gmail.com", 100112048);
       $resultado = $this->object->inserirUsuario($usuario);
       $this->assertTrue(true, $resultado, "Impossivel inserir usuario!");
    }
    
     /**
     * @covers UsuarioDAO::alterarUsuario
     * @todo   Implement testAlterarUsuario().
     */
    public function testAlterarUsuario() {
        $usuario = new Usuario(1, "lucascouto","23456", "Lucas Couto", "loc.unb@gmail.com", 100112048);
        $resultado = $this->object->alterarUsuario($usuario, "lucascouto");
        $this->assertTrue(true, $resultado, "Impossivel alterar usuario! Talvez esse registro nao  existe!");
    }
    
     /**
     * @covers UsuarioDAO::obterUsuario_Especifico
     * @todo   Implement testObterUsuario_Especifico().
     */
    public function testObterUsuario_Especifico() {
        $resultado = $this->object->obterUsuario_Especifico("lucascouto");
        $this->assertTrue(true, $resultado, "Impossivel obter o usuario especificado!");
    }
    
     /**
     * @covers UsuarioDAO::obterUsuario
     * @todo   Implement testObterUsuario().
     */
    public function testObterUsuario() {
        $resultado = $this->object->obterUsuario();
         foreach ($resultado as $row){
            $this->assertArrayHasKey("login", $row, "A listagem de todos os usuários falhou!");
            $this->assertArrayHasKey("senha", $row, "A listagem de todos os usuários falhou!");
            $this->assertArrayHasKey("email", $row, "A listagem de todos os usuários falhou!");
            $this->assertArrayHasKey("nome", $row, "A listagem de todos os usuários falhou!");
            $this->assertArrayHasKey("matricula", $row, "A listagem de todos os usuários falhou!");
            $this->assertArrayHasKey("perfil_cod", $row, "A listagem de todos os usuários falhou!");
        }
    }
    
    /**
     * @covers UsuarioDAO::valida_login
     * @todo   Implement testValida_Login().
     */
    public function testValida_Login(){
        $resultado = $this->object->valida_login("lucascouto", "23456");
        $this->assertEquals(1, $resultado, "Nao foi possivel validar o login!");
    }
    
    /**
     * @covers UsuarioDAO::verificaLogin
     * @todo   Implement testVerificaLogin().
     */
    public function testVerificaLogin(){
        $resultado = $this->object->verificaLogin("lucascouto");
        $this->assertEquals(1, $resultado);
    }
    
     /**
     * @covers UsuarioDAO::deletarUsuario
     * @todo   Implement testDeletarUsuario().
     */
    public function testDeletarUsuario() {
       $resultado = $this->object->deletarUsuario("lucascouto");
       $this->assertTrue(true, $resultado, "Impossivel deletar o usuario! Talvez esse registro na existe!");
    }
    
     /**
     * @covers UsuarioDAO::numColUsuario
     * @todo   Implement testNumColUsuario().
     */
    public function testNumColUsuario() {
       $resultado = $this->object->numColUsuario();
       $this->assertEquals(6, $resultado, "A consulta retornou um número incorreto de campos");
    }
    
    /**
     * @covers UsuarioDAO::fechaConexao
     * @todo   Implement testFechaConexao().
     */
    public function testFechaConexao() {
        $resultado = $this->object->fechaConexao();
        $this->assertEquals(NULL, $resultado, "Nao foi possivel fechar a conexao com o BD!");
    }


}
