<?php

require_once "../../DAO/StatusDAO.php";
require_once "../../Model/Status.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-31 at 01:51:10.
 */
class StatusDAOTest extends PHPUnit_Framework_TestCase {

    /**
     * @var StatusDAO
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new StatusDAO();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->object);
    }

    /**
     * @covers StatusDAO::inserirStatus
     * @todo   Implement testInserirStatus().
     */
    public function testInserirStatus() {
        $status = new Status(1, "Em Aberto");
        $resultado = $this->object->inserirStatus($status);
        $this->assertTrue(true, $resultado, "Nao foi possivel inserir o status no BD!");
    }

    /**
     * @covers StatusDAO::alterarStatus
     * @todo   Implement testAlterarStatus().
     */
    public function testAlterarStatus() {
       $status = new Status(2, "Concluido");
       $resultado = $this->object->alterarStatus($status, 1);
       $this->assertTrue(true, $resultado, "Nao foi possivel alterar O status!");
    }

    /**
     * @covers StatusDAO::obterStatus_Especifico
     * @todo   Implement testObterStatus_Especifico().
     */
    public function testObterStatus_Especifico() {
        $resultado = $this->object->obterStatus_Especifico(2);
        if ($resultado!=false)
            $resultado = true;
        $this->assertTrue(true, $resultado, "Nao foi possivel obter o status especifico!");
    }

    /**
     * @covers StatusDAO::obterStatus_Geral
     * @todo   Implement testObterStatus_Geral().
     */
    public function testObterStatus_Geral() {
       $resultado = $this->object->obterStatus_Geral();
       foreach($resultado as $row){
            $this->assertArrayHasKey("cod", $row, "Nao foi possivel retornar todos os campos!");
            $this->assertArrayHasKey("descricao", $row, "Nao foi possivel retornar todos os campos!");
        }
    }

    /**
     * @covers StatusDAO::deletarStatus
     * @todo   Implement testDeletarStatus().
     */
    public function testDeletarStatus() {
      $resultado = $this->object->deletarStatus(1);
       $this->assertTrue(true, $resultado, "Impossivel deletar status!");
    }

    /**
     * @covers StatusDAO::fechaConex達o
     * @todo   Implement testFechaConex達o().
     */
    public function testFechaConex達o() {
        $resultado = $this->object->fechaConex達o();
       $this->assertEquals(NULL, $resultado, "Impossivel fechar conexao!");
    }

}
